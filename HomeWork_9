package homework9;

import java.util.List;
import java.util.stream.Collectors;

public class Homework {

    /** Имеется следующая структура:
     *
     interface Student {
     String getName();
     List<Course> getAllCourses();
     }
     interface Course {}

     Задания:
     1. Написать функцию, принимающую список Student и возвращающую список уникальных курсов,
     на которые подписаны студенты.
     2. Написать функцию, принимающую на вход список Student и возвращающую список из трех самых любознательных
     (любознательность определяется количеством курсов).
     3. Написать функцию, принимающую на вход список Student и экземпляр Course,
     возвращающую список студентов, которые посещают этот курс.
     */


    public static void main(String[] args) {
            List<Student> students = Data.getStudentsList();
            Course randomCourse = Data.getRandomCourse();
            System.out.println(getUnicsCourses(students));
            System.out.println(getStudentsWithMoreCourses(students));
            System.out.println(getStudentsWithCourse(students, randomCourse));
        }

        public static List<Course> getUnicsCourses(List<Student> students) {
            return students.stream()
                    .flatMap(student -> student.getAllCourses().stream())
                    .distinct()
                    .collect(Collectors.toList());
        }

        public static List<Student> getStudentsWithMoreCourses(List<Student> students) {
            return students.stream() // Создаем стрим
                    .sorted((s1, s2) -> (s2.getAllCourses().size()) - (s1.getAllCourses().size()))
                    .limit(3)
                    .collect(Collectors.toList());
        }

        public static List<Student> getStudentsWithCourse(List<Student> students, Course course) {
            System.out.println(course);
            return students.stream()
                    .filter(student -> student.getAllCourses().contains(course))
                    .collect(Collectors.toList());
    }
}
